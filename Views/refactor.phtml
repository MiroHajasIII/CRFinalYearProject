<?php require('templates/header.phtml') ?>

<div id="documentInputChoices">
    <h2>Document Input Choices</h2>
    <!-- GitHub Link Input WIP TODO-->
    <div class="form-group">
        <label for="githubLink">GitHub Link:</label>
        <input type="text" class="form-control" id="githubLink" placeholder="Enter GitHub link">
    </div>
    <!-- Drag and Drop Area, including multiple file types to be used -->
    <div id="dragDropArea">
        <p>Drag and drop your file here</p>
        <input type="file" id="fileInput" accept=".txt, .php, .phtml, .css, .html">
    </div>
</div>

<div>
    <!-- Buttons for refactoring options -->
    <div id="refactoringOptions">
        <button class="btn btn-warning" id="renameVariableButton">Variable Rename</button>
        <button class="btn btn-warning" id="extractMethodButton">Extract Method</button>
        <button class="btn btn-warning" id="inlineVariableButton">Inline Variable</button>
        <button class="btn btn-warning" id="removeUnusedCodeButton">Remove Unused Code</button>
    </div>
    <!-- Buttons for help and more information on the refactoring options -->
    <div id="refactoringOptions">
        <button class="btn btn-secondary help-button" id="renameVariableHelpButton">Variable Rename Help</button>
        <button class="btn btn-secondary help-button" id="extractMethodHelpButton">Extract Method Help</button>
        <button class="btn btn-secondary help-button" id="inlineVariableHelpButton">Inline Variable Help</button>
        <button class="btn btn-secondary help-button" id="removeUnusedCodeHelpButton">Remove Unused Code Help</button>
    </div>

    <!-- Editor and Results areas -->
    <div id="textAreas" class="row">
        <!-- Editor area -->
        <div class="col-md-6">
            <!-- Editor display area -->
            <div class="testing" id="editorDisplay">
                <h2>Editor Area</h2>
                <!-- Display uploaded document here -->
                <textarea id="codeInput"></textarea>
            </div>
        </div>
        <!-- Results area -->
        <div class="col-md-6">
            <div class="testing" id="editorDisplay" >
                <h2>Results Area</h2>
                <textarea id="codeOutput"></textarea>
            </div>
        </div>
        <!-- Refactor button -->
        <button id="refactorButton" class="btn btn-warning mt-3 btn-sm">Set Manual Refactor Changes</button>
        <!-- Download button -->
        <button id="downloadButton" class="btn btn-secondary mt-3 btn-sm">Download Refactored Code</button>
    </div>

</div>

<?php require('templates/footer.phtml') ?>

<script>
    /**
     * area for REST GitHub API authentication
     */
    import { App } from "@octokit/app";
    const app = new App({
        appId: 869888,
        privateKey: "MIIEpgIBAAKCAQEAxRv+Ls0LCfhNxbN55IzpV4voLjkXJepzG0TipLkGUuy1XXgDz6/Ls+OrPK2iOUcwWGQbNwoYeUwKQyQAX18ntSBCuKVnc5GiFLI4ZWXRX1S3J7rZd97wQTZdFing0te9LhZiSYNMztTOa/FtL7Wn5rCGfV3l+j1l8V1/nRAeBmoSs76rHius8K/wB/L1D9WMvJW9mpXXccGNkVJggguvK/TObYR1+FrxJVUVWkNSCE9M9HqAQkH+9b+4xW7mQwW+EJkpnD3U2Ysg0SEv6C/dgEfT/uk3ASupOxefM0ECdqBlzn8qlaWUoBX3L94M8eQv0oh9nDhRBRTjjgvEl/F/pwIDAQABAoIBAQCh0vqbF9IBTG8ladUgE6QbMQzcrhhYE6SO9b4ROKp9eELqSvbuEsjtlnPmbDMsTUretsk1Jb+0Df664pq/shKafLLqfzlww1bLIQp2DOKZHqcEIj4aUNj04RoJcTZYQ7DYXp4w9nAfus0CCAL5UW1YUwMHeAiwqqnAQF/d5faQkiEU71Dvgu0QIr/DJAQTupCGnXvyGQ6rEj3LEm8UUhQSI4QGYWlnSwv4hULYnr+lMYe5qhVKgPGoO49vwlEyFsyC//zUaN4kyWyqE04xg9iLSzOBKA3xgZ5lzRKXwglyXlbjdV9M/r2V8vGN8r9a5cVOsTZPryWRV2CJ9uT7HMRBAoGBAPW79Z/h5cwCQOarHph43jVwcEB3AfLEogWaMmaEA47LlXAYPDiZ9zU7ieUhqcL4oEepdkLe6TOu3PldH3HvexjPqKUaABQU0esORDkoANICktTW9bNTYvq0M90XBv4CITmyDfh1s1wCLrpn38G0crZT2Irrl7xM6lxBOK0BD/zhAoGBAM1YAfVx6hh4ZmzbJg8VmZguLR4sPyMCWi2LVn35NhJliqaI/ATSfEnVqW3dhB+FhbVBHInpZTsBn6X16EUBwffAkrrybzkmeOeP9olS+ZlPTKlDrEh1hgiBuZ/99CfmT+HRLhw46mHRL7ebhQSNofdjJV5meQ5A4WoCOlH+KsWHAoGBAM+A+cgZ7H+aQ43FYB+mqRV9LfzxwZ5r9tk+PWMeBRcWyMkQXgH52auE7EulYoH2ivoYmnmbXFc9SPH1dfEzJcJs0F8iloBemGih8nBFXHP6olzCbFYSixljBAylPk1OJRpgRbXSRjPiz+yufF9I7jkSkl+007u5Q4nFtYM5y3NhAoGBALj1d7Y0aE6oTGHqt4pIw3OOzDbsVeZb3Qw/AKYxjmHdspi0tIRHb4o1+QmryLF33GrZ/jG+197hZILhT9iwb52QiNn5OvO4UpkJVGB3K7nK8ttXyFvv9827w453+a7ixbs6ZpUnMv7upFN2ssbaKDSjymoQVSPgjumknhFypeYLAoGBAM3h6JVl2OV0TH+t5dFRLbJBDfrITYO/LlXpNbHz7FjJg4nvlqkhAQdzh1fcEfHkTptqWgqfN7IOQmwnuLnMJWPaNK2AZaSwKqvEpdSdRpRm9zbazCkPFokPJ9hocxzHThvGe4yRsK0oNLsKAkOHDMU182xsyibtq8XVQ2iY+Efb",
    });

    async function getOctokitForInstallation(installationId) {
        try {
            const octokit = await app.getInstallationOctokit(installationId);
            return octokit;
        } catch (error) {
            console.error("Error acquiring Octokit for installation process:", error);
            throw error;
        }
    }

    /**
     * logic and CodeMirror variables found below
     */
    // Get the textarea elements
    var codeInput = document.getElementById('codeInput');
    var codeOutput = document.getElementById('codeOutput');

    // initialize CodeMirror for the codeInput text area
    var editorInput = CodeMirror.fromTextArea(codeInput, {
        lineNumbers: true,
        mode: 'javascript',
        theme: 'dracula'
    });

    // initialize CodeMirror for the codeOutput text area
    var editorOutput = CodeMirror.fromTextArea(codeOutput, {
        lineNumbers: true,
        mode: 'javascript',
        theme: 'dracula',
        readOnly: true // Make the output area read-only
    });

    // load the user chosen file into the CodeMirror text editor area
    document.getElementById('fileInput').addEventListener('change', function(event) {
        console.log('File selected');
        var file = event.target.files[0];
        var reader = new FileReader();

        reader.onload = function(e) {
            // Set the content of the CodeMirror editor to the loaded file content
            editorInput.setValue(e.target.result);
        };
        reader.readAsText(file);
    });


    /**
     * functions and relative logic found below
     */
    // Function to handle editor area and results area
    function copyText() {
        // Get the code from the editor
        var code = editorInput.getValue();

        // Set the code to the output area
        editorOutput.setValue(code);
    }

    document.getElementById('refactorButton').addEventListener('click', function() {
        // call the copyText function when the button is clicked
        copyText();
    });

    document.getElementById('downloadButton').addEventListener('click', function() {
        // get the code from the output area
        var code = editorOutput.getValue();

        // create a Blob object containing the code
        var blob = new Blob([code], { type: 'text/plain' });

        // create a URL for the Blob object
        var url = URL.createObjectURL(blob);

        // create an anchor element with the download attribute set to the desired file name
        var a = document.createElement('a');
        a.href = url;
        a.download = 'refactored_code.txt';

        // append the anchor element to the body
        document.body.appendChild(a);

        // simulate a click on the anchor element to trigger the download
        a.click();

        // remove the anchor element from the body
        document.body.removeChild(a);

        // revoke the URL to release the resources
        URL.revokeObjectURL(url);
    });


    /**
     * variable rename refactoring code area below
     */
    document.getElementById('renameVariableButton').addEventListener('click', function() {
        // prompt user to enter the old variable name
        var oldVariableName = prompt('Enter the name of the variable to rename:');
        if (!oldVariableName) return; // Exit if the user cancels or leaves the prompt blank

        // prompt user to enter the new variable name
        var newVariableName = prompt('Enter the new name for the variable:');
        if (!newVariableName) return; // Exit if the user cancels or leaves the prompt blank

        // get code from the editor
        var code = editorInput.getValue();

        // refactor code by renaming the variables
        var updatedCode = refactorRenameVariable(code, oldVariableName, newVariableName);

        // display refactored code in the input and output editor
        editorInput.setValue(updatedCode);
        editorOutput.setValue(updatedCode);
    });

    // function to refactor 'rename variable'
    function refactorRenameVariable(code, oldVariableName, newVariableName) {
        var regex = new RegExp('\\b' + oldVariableName + '\\b', 'g'); // Use word boundaries to match whole words
        var updatedCode = code.replace(regex, newVariableName);

        return updatedCode;
    }


    /**
     * extractMethod functionality code below
     */
    document.getElementById('extractMethodButton').addEventListener('click', function() {
        // get the selected code from the CodeMirror editor
        var selectedCode = editorInput.getSelection();

        // prompt user to enter the name of their new desired method
        var newMethodName = prompt('Enter the name of the new method:');

        if (newMethodName) {
            // split the selected code into lines
            var lines = selectedCode.split('\n');

            // indent each line with a tab, and retain any already implemented indentations from the code before
            for (var i = 0; i < lines.length; i++) {
                lines[i] = '\t' + lines[i]; // prepend a tab to each line
            }

            // join the lines back together with newline characters
            var indentedCode = lines.join('\n');

            // generate the new method with the selected code
            var newMethodCode = 'function ' + newMethodName + '() {\n' +
                indentedCode + '\n' +
                '}';

            // replace the selected code with a method call
            var methodCall = newMethodName + '();\n\n';
            editorInput.replaceSelection(methodCall);

            // insert the new method code at the cursor position in the editor
            editorInput.replaceSelection(newMethodCode);

            // update the CodeMirror editor
            editorOutput.setValue(editorInput.getValue());
            // feedback for user upon success
            alert('Method "' + newMethodName + '" extracted successfully.');
        }
    });


    /**
     * inline variable code below
     */
    document.getElementById('inlineVariableButton').addEventListener('click', function() {
        // retrieve the variable name and value from the user
        var variableName = prompt('Enter the name of the variable to inline:');
        var variableValue = prompt('Enter the value to inline for the variable:');

        if (variableName && variableValue) {
            // get the code from the editor
            var code = editorInput.getValue();

            // refactor the code by replacing all occurrences of the variable with its value
            var updatedCode = refactorInlineVariable(code, variableName, variableValue);

            // display the refactored code in the input and output editor
            editorInput.setValue(updatedCode);
            editorOutput.setValue(updatedCode);

            // provide feedback to the user
            alert('Variable "' + variableName + '" inlined successfully.');
        }
    });

    // function to refactor 'inline variable'
    function refactorInlineVariable(code, variableName, variableValue) {
        // create a regex to match variable declarations
        var declarationRegex = new RegExp('\\bvar\\s+' + variableName + '\\s*=\\s*.*?;', 'g');
        // replace all occurrences of variable declarations with comments
        var updatedCode = code.replace(declarationRegex, '// Variable "' + variableName + '" was declared here.');

        // if the variable is not being declared, replace occurrences with the desired value
        updatedCode = updatedCode.replace(new RegExp('\\b' + variableName + '\\b', 'g'), variableValue);

        return updatedCode;
    }


    /**
     * remove unused code functionality bellow
     */
// function to remove unused variables, functions, and classes from the code
    function removeUnusedCode() {
        var code = editorInput.getValue();

        // identify and remove unused variables
        code = removeUnusedVariables(code);

        // identify and remove unused functions
        code = removeUnusedFunctions(code);

        // identify and remove unused classes
        code = removeUnusedClasses(code);

        // update the editor with the modified code
        editorInput.setValue(code);
        editorOutput.setValue(code);
    }

    // function to remove unused variables from the code
    function removeUnusedVariables(code) {
        // define a regular expression to match variable declarations
        var declarationRegex = /\b(var|let|const)\s+(\w+)\s*=/g;

        // find all variable declarations in the code
        var matches = code.match(declarationRegex);

        // if no matches found, return the original code
        if (!matches) {
            return code;
        }

        // iterate over the matches and remove declarations of unused variables
        matches.forEach(function (match) {
            var variableName = match.split(/\s+/)[1]; // Extract variable name
            var regex = new RegExp('\\b' + escapeRegExp(variableName) + '\\b', 'g'); // Escape special characters

            // check if the variable is used in the code
            if (!code.match(regex)) {
                // if not used, remove the variable declaration
                code = code.replace(new RegExp('\\b' + escapeRegExp(match) + ';?\\s*', 'g'), '');
            }
        });

        return code;
    }

    // function to remove unused functions from the code
    function removeUnusedFunctions(code) {
        // define a regular expression to match function declarations
        var declarationRegex = /\bfunction\s+(\w+)\s*\(/g;

        // find all function declarations in the code
        var matches = code.match(declarationRegex);

        // if no matches found, return the original code
        if (!matches) {
            return code;
        }

        // iterate over the matches and remove declarations of unused functions
        matches.forEach(function (match) {
            var functionName = match.split(/\s+/)[1]; // Extract function name
            var regex = new RegExp('\\b' + escapeRegExp(functionName) + '\\b', 'g'); // Escape special characters

            if (!code.match(regex)) {
                // if not used, remove the function declaration
                code = code.replace(new RegExp('\\b' + escapeRegExp(match) + '\\s*{[^{}]*}\\s*', 'g'), '');
            }
        });

        return code;
    }

    // function to remove unused classes from the code
    function removeUnusedClasses(code) {
        // define a regular expression to match class declarations
        var declarationRegex = /\bclass\s+(\w+)\s*{/g;

        // find all class declarations in the code
        var matches = code.match(declarationRegex);

        // if no matches found, return the original code
        if (!matches) {
            return code;
        }

        // iterate over the matches and remove declarations of unused classes
        matches.forEach(function (match) {
            var className = match.split(/\s+/)[1]; // Extract class name
            var regex = new RegExp('\\b' + escapeRegExp(className) + '\\b', 'g'); // Escape special characters

            // check if the class is used in the code
            if (!code.match(regex)) {
                // if not used, remove the class declaration
                code = code.replace(new RegExp('\\b' + escapeRegExp(match) + '[^{}]*{[^{}]*}\\s*', 'g'), '');
            }
        });
        return code;
    }

    // add event listener to the removeUnusedCodeButton
    document.getElementById('removeUnusedCodeButton').addEventListener('click', removeUnusedCode);

    // function to escape special characters in a string to be used in a regular expression
    function escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
    }



    /**
     * Help dialogs for refactoring options
     */
    document.querySelectorAll('.help-button').forEach(function(button) {
        button.addEventListener('click', function() {
            var option = button.textContent.trim();
            var helpText = '';

            switch (option) {
                case 'Variable Rename Help':
                    helpText = 'This option allows you to rename a variable throughout your code. ' +
                        'Enter the old variable name and then the new variable name.' +
                        '\n\nFor example:\n' +
                        'To change all the occurrences of "method1()" to "finalMethod()" in your code, you can ' +
                        'set "method1()" as the target variable name, and "finalMethod()" as the name to overwrite this ' +
                        'with. Every instance of "method1()" within your code will then be changed to "finalMethod()"';
                    break;
                case 'Extract Method Help':
                    helpText = 'This option helps you extract a block of code into a new method. ' +
                        'Select the code you want to extract and enter the name of the new method.' +
                        '\n\nFor example:\n' +
                        'If you have a function that performs multiple steps to calculate a result. ' +
                        'Instead of having all those steps in one large function, you can use "Extract ' +
                        'Method" to create a new function for a specific subset of those steps. ' +
                        'This makes the code easier to read, understand, and maintain.';
                    break;
                case 'Inline Variable Help':
                    helpText = 'This option enables you to inline a variable by replacing all its occurrences with a value. ' +
                        'Enter the variable name and the value to inline.' +
                        '\n\nFor example:\n' +
                        'Suppose you have a variable named "discountPercentage" that is used multiple ' +
                        'times in your code to calculate discounted prices. Instead of keeping ' +
                        '"discountPercentage" as a separate variable throughout your code, you can use ' +
                        '"Inline Variable" to replace all instances of "discountPercentage" with its actual ' +
                        'value, such as 0.10 for a 10% discount, and comment out the original declaration of ' +
                        'the variable as well.';
                    break;
                case 'Remove Unused Code Help':
                    helpText = 'This option allows you to rename a function throughout your code. ' +
                        'Enter the old function name and then the new function name.';
                    break;
                default:
                    helpText = 'Help information not available.';
            }

            alert(helpText);
        });
    });
</script>
