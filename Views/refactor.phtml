<?php require('templates/header.phtml') ?>

<div id="documentInputChoices">
    <h2>Document Input Choices</h2>
    <!-- GitHub Link Input WIP TODO-->
    <div class="form-group">
        <label for="githubLink">GitHub Link:</label>
        <input type="text" class="form-control" id="githubLink" placeholder="Enter GitHub link">
    </div>
    <!-- Drag and Drop Area, including multiple file types to be used -->
    <div id="dragDropArea">
        <p>Drag and drop your file here</p>
        <input type="file" id="fileInput" accept=".txt, .php, .phtml, .css, .html">
    </div>
</div>

<div>
    <!-- Buttons for refactoring options -->
    <div id="refactoringOptions">
        <button class="btn btn-warning" id="renameVariableButton">Variable Rename</button>
        <button class="btn btn-warning" id="extractMethodButton">Extract Method</button>
        <button class="btn btn-warning" id="renameFunctionButton">Rename Function</button>
        <button class="btn btn-warning" id="inlineVariableButton">Inline Variable</button>
        <button class="btn btn-warning" id="removeUnusedButton">Remove Unused</button>
    </div>
    <div id="variableRenameForm">
        <label for="oldVariableName">Old Variable Name:</label>
        <input type="text" id="oldVariableNameInput" placeholder="Enter old variable name"><br>
        <label for="newVariableName">New Variable Name:</label>
        <input type="text" id="newVariableNameInput" placeholder="Enter new variable name"><br>
    </div>

    <!-- Editor and Results areas -->
    <div id="textAreas" class="row">
        <!-- Editor area -->
        <div class="col-md-6">
            <!-- Editor display area -->
            <div class="testing" id="editorDisplay">
                <h2>Editor Area</h2>
                <!-- Display uploaded document here -->
                <textarea id="codeInput"></textarea>
            </div>
        </div>
        <!-- Results area -->
        <div class="col-md-6">
            <div class="testing" id="editorDisplay" >
                <h2>Results Area</h2>
                <textarea id="codeOutput"></textarea>
            </div>
        </div>
        <!-- Refactor button -->
        <button id="refactorButton" class="btn btn-warning mt-3 btn-sm">Set Manual Refactor Changes</button>
        <!-- Download button -->
        <button id="downloadButton" class="btn btn-secondary mt-3 btn-sm">Download Refactored Code</button>
    </div>

</div>

<?php require('templates/footer.phtml') ?>

<script>
    /**
     * logic and CodeMirror variables found below
     */
    // Get the textarea elements
    var codeInput = document.getElementById('codeInput');
    var codeOutput = document.getElementById('codeOutput');

    // Initialize CodeMirror for codeInput
    var editorInput = CodeMirror.fromTextArea(codeInput, {
        lineNumbers: true,
        mode: 'javascript',
        theme: 'dracula'
    });

    // Initialize CodeMirror for codeOutput
    var editorOutput = CodeMirror.fromTextArea(codeOutput, {
        lineNumbers: true,
        mode: 'javascript',
        theme: 'dracula',
        readOnly: true // Make the output area read-only
    });

    // load the user chosen file into the CodeMirror text editor area
    document.getElementById('fileInput').addEventListener('change', function(event) {
        console.log('File selected');
        var file = event.target.files[0];
        var reader = new FileReader();

        reader.onload = function(e) {
            // Set the content of the CodeMirror editor to the loaded file content
            editorInput.setValue(e.target.result);
        };
        reader.readAsText(file);
    });



    /**
     * functions and relative logic found below
     */
    // Function to handle editor area and results area
    function copyText() {
        // Get the code from the editor
        var code = editorInput.getValue();

        // Set the code to the output area
        editorOutput.setValue(code);
    }

    document.getElementById('refactorButton').addEventListener('click', function() {
        // call the copyText function when the button is clicked
        copyText();
    });

    document.getElementById('downloadButton').addEventListener('click', function() {
        // get the code from the output area
        var code = editorOutput.getValue();

        // create a Blob object containing the code
        var blob = new Blob([code], { type: 'text/plain' });

        // create a URL for the Blob object
        var url = URL.createObjectURL(blob);

        // create an anchor element with the download attribute set to the desired file name
        var a = document.createElement('a');
        a.href = url;
        a.download = 'refactored_code.txt';

        // append the anchor element to the body
        document.body.appendChild(a);

        // simulate a click on the anchor element to trigger the download
        a.click();

        // remove the anchor element from the body
        document.body.removeChild(a);

        // revoke the URL to release the resources
        URL.revokeObjectURL(url);
    });


    /**
     * rename variable refactoring code area below
     */
    document.getElementById('renameVariableButton').addEventListener('click', function() {
        // retrieve the old and new variable names from the input fields
        var oldVariableName = document.getElementById('oldVariableNameInput').value;
        var newVariableName = document.getElementById('newVariableNameInput').value;
        console.log("newVariableNameInput: " + newVariableName);

        // get the code from the editor
        var code = editorInput.getValue();

        // refactor the code by renaming the variables
        var updatedCode = refactorRenameVariable(code, oldVariableName, newVariableName);

        // display the refactored code in the input and output editor
        editorInput.setValue(updatedCode);
        editorOutput.setValue(updatedCode);
    });

    // function to refactor 'rename variable'
    function refactorRenameVariable(code, oldVariableName, newVariableName) {
        var regex = new RegExp('\\b' + oldVariableName + '\\b', 'g'); // use word boundaries to match whole words
        var updatedCode = code.replace(regex, newVariableName);

        return updatedCode;
    }

    /**
     * extractMethod functionality code below
     */
    document.getElementById('extractMethodButton').addEventListener('click', function() {
        // get the selected code from the CodeMirror editor
        var selectedCode = editorInput.getSelection();

        // prompt the user to enter the name of the new method
        var newMethodName = prompt('Enter the name of the new method:');

        if (newMethodName) {
            // generate the new method with the selected code
            var newMethodCode = 'function ' + newMethodName + '() {\n' +
                selectedCode + '\n' +
                '}\n';

            // insert the new method code at the cursor position in the editor
            editorInput.replaceSelection(newMethodCode);

            // replace the selected code with a method call
            var methodCall = newMethodName + '();';
            editorInput.replaceSelection(methodCall);

            // update the CodeMirror editor
            editorOutput.setValue(editorInput.getValue());

            // provide feedback to the user
            alert('Method "' + newMethodName + '" extracted successfully.');
        }
    });
</script>
